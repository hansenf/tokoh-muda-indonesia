// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO user (
  username,email, nomorhp, password
) VALUES (
  ?, ?,?,?
)
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Nomorhp  int    `json:"nomorhp"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Nomorhp,
		arg.Password,
	)
	return err
}

const getUserByEmailAndPassword = `-- name: GetUserByEmailAndPassword :one
SELECT id, username, password, nomorhp, email FROM user WHERE email = ? AND password = ?
`

type GetUserByEmailAndPasswordParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) GetUserByEmailAndPassword(ctx context.Context, arg GetUserByEmailAndPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailAndPassword, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Nomorhp,
		&i.Email,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password, nomorhp, email FROM user WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Nomorhp,
		&i.Email,
	)
	return i, err
}
