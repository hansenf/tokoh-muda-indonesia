// Code generated by sqlc. DO NOT EDIT.
// source: admin.sql

package db

import (
	"context"
	"database/sql"
)

const createAdmin = `-- name: CreateAdmin :exec
INSERT INTO admin(
    username, password, role
) VALUES(
    ?,?,?
)
`

type CreateAdminParams struct {
	Username sql.NullString `json:"username"`
	Password sql.NullString `json:"password"`
	Role     sql.NullString `json:"role"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) error {
	_, err := q.db.ExecContext(ctx, createAdmin, arg.Username, arg.Password, arg.Role)
	return err
}

const getAdmin = `-- name: GetAdmin :one
SELECT id, username, password, role FROM admin WHERE username = ? AND password = ?
`

type GetAdminParams struct {
	Username sql.NullString `json:"username"`
	Password sql.NullString `json:"password"`
}

func (q *Queries) GetAdmin(ctx context.Context, arg GetAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdmin, arg.Username, arg.Password)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const getOneAdmin = `-- name: GetOneAdmin :one
SELECT id, username, password, role FROM admin WHERE username = "admin"
`

func (q *Queries) GetOneAdmin(ctx context.Context) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getOneAdmin)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
	)
	return i, err
}
