// Code generated by sqlc. DO NOT EDIT.
// source: tantangan.sql

package db

import (
	"context"
	"database/sql"
)

const listTantangan = `-- name: ListTantangan :many
SELECT id, judul_tantangan, tema, latar, url_video_tantangan, task_tantangan, ujian_tantangan, skor_tantangan, id_admin FROM tantangan
`

func (q *Queries) ListTantangan(ctx context.Context) ([]Tantangan, error) {
	rows, err := q.db.QueryContext(ctx, listTantangan)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tantangan
	for rows.Next() {
		var i Tantangan
		if err := rows.Scan(
			&i.ID,
			&i.JudulTantangan,
			&i.Tema,
			&i.Latar,
			&i.UrlVideoTantangan,
			&i.TaskTantangan,
			&i.UjianTantangan,
			&i.SkorTantangan,
			&i.IDAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTantangan = `-- name: UpdateTantangan :exec
UPDATE tantangan SET task_tantangan = ?, ujian_tantangan = ?, skor_tantangan = ? WHERE id = ?
`

type UpdateTantanganParams struct {
	TaskTantangan  sql.NullString `json:"task_tantangan"`
	UjianTantangan sql.NullString `json:"ujian_tantangan"`
	SkorTantangan  sql.NullString `json:"skor_tantangan"`
	ID             int32          `json:"id"`
}

func (q *Queries) UpdateTantangan(ctx context.Context, arg UpdateTantanganParams) error {
	_, err := q.db.ExecContext(ctx, updateTantangan,
		arg.TaskTantangan,
		arg.UjianTantangan,
		arg.SkorTantangan,
		arg.ID,
	)
	return err
}
