// Code generated by sqlc. DO NOT EDIT.
// source: event.sql

package db

import (
	"context"
	"database/sql"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO event(
    judul_event, deskripsi_event, kriteria_event, tanggal_event
) VALUES(
    ?,?,?,?
)
`

type CreateEventParams struct {
	JudulEvent     sql.NullString `json:"judul_event"`
	DeskripsiEvent sql.NullString `json:"deskripsi_event"`
	KriteriaEvent  sql.NullString `json:"kriteria_event"`
	TanggalEvent   sql.NullString `json:"tanggal_event"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.JudulEvent,
		arg.DeskripsiEvent,
		arg.KriteriaEvent,
		arg.TanggalEvent,
	)
	return err
}

const deleteEvent = `-- name: DeleteEvent :exec
;

DELETE FROM event WHERE id = ?
`

func (q *Queries) DeleteEvent(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :many
SELECT id, judul_event, deskripsi_event, kriteria_event, tanggal_event, id_admin FROM event
`

func (q *Queries) GetEvent(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEvent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.JudulEvent,
			&i.DeskripsiEvent,
			&i.KriteriaEvent,
			&i.TanggalEvent,
			&i.IDAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE event SET judul_event=?, deskripsi_event=?, kriteria_event=?, tanggal_event=? WHERE id = ?
`

type UpdateEventParams struct {
	JudulEvent     sql.NullString `json:"judul_event"`
	DeskripsiEvent sql.NullString `json:"deskripsi_event"`
	KriteriaEvent  sql.NullString `json:"kriteria_event"`
	TanggalEvent   sql.NullString `json:"tanggal_event"`
	ID             int32          `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.ExecContext(ctx, updateEvent,
		arg.JudulEvent,
		arg.DeskripsiEvent,
		arg.KriteriaEvent,
		arg.TanggalEvent,
		arg.ID,
	)
	return err
}
